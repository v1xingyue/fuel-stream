/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.9
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from "fuels";

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum InitializationErrorInput {
  CannotReinitialized = "CannotReinitialized",
}
export enum InitializationErrorOutput {
  CannotReinitialized = "CannotReinitialized",
}

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type StreamDataInput = {
  asset_id: AssetIdInput;
  sender: IdentityInput;
  recipient: IdentityInput;
  amount: BigNumberish;
  start_time: BigNumberish;
  end_time: BigNumberish;
  interval: BigNumberish;
};
export type StreamDataOutput = {
  asset_id: AssetIdOutput;
  sender: IdentityOutput;
  recipient: IdentityOutput;
  amount: BN;
  start_time: BN;
  end_time: BN;
  interval: BN;
};

const abi = {
  programType: "contract",
  specVersion: "1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "()",
      concreteTypeId:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
    },
    {
      type: "enum std::identity::Identity",
      concreteTypeId:
        "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      metadataTypeId: 1,
    },
    {
      type: "enum sway_libs::ownership::errors::InitializationError",
      concreteTypeId:
        "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
      metadataTypeId: 2,
    },
    {
      type: "struct std::vec::Vec<u64>",
      concreteTypeId:
        "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      metadataTypeId: 9,
      typeArguments: [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      ],
    },
    {
      type: "struct stream::StreamData",
      concreteTypeId:
        "ba6159a4ba2e4b7f57f05a74ecb204cb765b9f330a46f28a63ca856cc6dbebc7",
      metadataTypeId: 10,
    },
    {
      type: "struct sway_libs::ownership::events::OwnershipSet",
      concreteTypeId:
        "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
      metadataTypeId: 11,
    },
    {
      type: "u64",
      concreteTypeId:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
    },
  ],
  metadataTypes: [
    {
      type: "b256",
      metadataTypeId: 0,
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 1,
      components: [
        {
          name: "Address",
          typeId: 5,
        },
        {
          name: "ContractId",
          typeId: 7,
        },
      ],
    },
    {
      type: "enum sway_libs::ownership::errors::InitializationError",
      metadataTypeId: 2,
      components: [
        {
          name: "CannotReinitialized",
          typeId:
            "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 3,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 4,
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 5,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 6,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 7,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 8,
      components: [
        {
          name: "ptr",
          typeId: 4,
        },
        {
          name: "cap",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [3],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 9,
      components: [
        {
          name: "buf",
          typeId: 8,
          typeArguments: [
            {
              name: "",
              typeId: 3,
            },
          ],
        },
        {
          name: "len",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [3],
    },
    {
      type: "struct stream::StreamData",
      metadataTypeId: 10,
      components: [
        {
          name: "asset_id",
          typeId: 6,
        },
        {
          name: "sender",
          typeId: 1,
        },
        {
          name: "recipient",
          typeId: 1,
        },
        {
          name: "amount",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "start_time",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "end_time",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "interval",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "struct sway_libs::ownership::events::OwnershipSet",
      metadataTypeId: 11,
      components: [
        {
          name: "new_owner",
          typeId: 1,
        },
      ],
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "stream_id",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      name: "claim",
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "owner",
          concreteTypeId:
            "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
        },
      ],
      name: "constructor",
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          concreteTypeId:
            "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
        },
        {
          name: "amount",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "start_time",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "end_time",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "interval",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      name: "create_stream",
      output:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [
        {
          name: "stream_id",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      name: "get_stream",
      output:
        "ba6159a4ba2e4b7f57f05a74ecb204cb765b9f330a46f28a63ca856cc6dbebc7",
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "owner",
          concreteTypeId:
            "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
        },
      ],
      name: "get_streams",
      output:
        "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "2161305517876418151",
      concreteTypeId:
        "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
    },
    {
      logId: "16280289466020123285",
      concreteTypeId:
        "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
    },
  ],
  messagesTypes: [],
  configurables: [],
};

const storageSlots: StorageSlot[] = [
  {
    key: "6e3c7b4f69bbff7132c3c3a62883a6868f47b0bc2a7f21605f29038cd9a5e05f",
    value: "000000000000007b000000000000000000000000000000000000000000000000",
  },
];

export class FuelStreamInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    claim: FunctionFragment;
    constructor: FunctionFragment;
    create_stream: FunctionFragment;
    get_stream: FunctionFragment;
    get_streams: FunctionFragment;
  };
}

export class FuelStream extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: FuelStreamInterface;
  declare functions: {
    claim: InvokeFunction<[stream_id: BigNumberish], void>;
    constructor: InvokeFunction<[owner: IdentityInput], void>;
    create_stream: InvokeFunction<
      [
        recipient: IdentityInput,
        amount: BigNumberish,
        start_time: BigNumberish,
        end_time: BigNumberish,
        interval: BigNumberish
      ],
      BN
    >;
    get_stream: InvokeFunction<[stream_id: BigNumberish], StreamDataOutput>;
    get_streams: InvokeFunction<[owner: IdentityInput], Vec<BN>>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ) {
    super(id, abi, accountOrProvider);
  }
}
